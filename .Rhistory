})
output$slick2 <- renderSlickR({
slickR(obj = teamImg2, slideId = 'ex9',height = 100,width='100%')
})
network <- shiny::reactiveValues()
network2 <- shiny::reactiveValues()
shiny::observeEvent(input$slick_current,{
network_clicked_slide <- input$slick_current$.clicked
network_relative_clicked <- input$slick_current$.relative_clicked
network_center_slide <- input$slick_current$.center
network_total_slide <- input$slick_current$.total
network_active_slide <- input$slick_current$.slide
if(!is.null(network_clicked_slide)){
network$network_clicked_slide <- network_clicked_slide
network$network_center_slide <- network_center_slide
network$network_relative_clicked <- network_relative_clicked
network$network_total_slide <- network_total_slide
network$network_active_slide <- network_active_slide
}
})
shiny::observeEvent(input$slick2_current,{
network2_clicked_slide <- input$slick2_current$.clicked
network2_relative_clicked <- input$slick2_current$.relative_clicked
network2_center_slide <- input$slick2_current$.center
network2_total_slide <- input$slick2_current$.total
network2_active_slide <- input$slick2_current$.slide
if(!is.null(network2_clicked_slide)){
network2$network2_clicked_slide <- network2_clicked_slide
network2$network2_center_slide <- network2_center_slide
network2$network2_relative_clicked <- network2_relative_clicked
network2$network2_total_slide <- network2_total_slide
network2$network2_active_slide <- network2_active_slide
}
})
output$current <- renderText({
l <- shiny::reactiveValuesToList(network)
paste(gsub('_',' ',names(l)), unlist(l),sep=' = ',collapse='\n')
})
output$current2 <- renderText({
l <- shiny::reactiveValuesToList(network2)
paste(gsub('_',' ',names(l)), unlist(l),sep=' = ',collapse='\n')
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
shiny::verbatimTextOutput('current'),
shiny::verbatimTextOutput('current2')
),
mainPanel(slickROutput("slick",width='100%',height='100px'),
slickROutput("slick2",width='100%',height='100px'))
)
)
shinyApp(ui = ui, server = server)
devtools::install_github("metrumresearchgroup/slickR")
suppressMessages({
library(shiny)
library(dplyr)
library(htmlwidgets)
library(slickR)
library(xml2)
})
#NBA Team Logos
nbaTeams=c("ATL","BOS","BKN","CHA","CHI","CLE","DAL","DEN","DET","GSW",
"HOU","IND","LAC","LAL","MEM","MIA","MIL","MIN","NOP","NYK",
"OKC","ORL","PHI","PHX","POR","SAC","SAS","TOR","UTA","WAS")
teamImg=sprintf(paste0("https://i.cdn.turner.com/nba/nba/.element/",
"img/4.0/global/logos/512x512/bg.white/svg/%s.svg"),
nbaTeams[1:10])
teamImg2=sprintf(paste0("https://i.cdn.turner.com/nba/nba/.element/",
"img/4.0/global/logos/512x512/bg.white/svg/%s.svg"),
nbaTeams[1:15])
server <- function(input, output) {
output$slick <- renderSlickR({
slickR(obj = teamImg, slideId = 'ex1',height = 100,width='100%')
})
output$slick2 <- renderSlickR({
slickR(obj = teamImg2, slideId = 'ex9',height = 100,width='100%')
})
network <- shiny::reactiveValues()
network2 <- shiny::reactiveValues()
shiny::observeEvent(input$slick_current,{
network_clicked_slide <- input$slick_current$.clicked
network_relative_clicked <- input$slick_current$.relative_clicked
network_center_slide <- input$slick_current$.center
network_total_slide <- input$slick_current$.total
network_active_slide <- input$slick_current$.slide
if(!is.null(network_clicked_slide)){
network$network_clicked_slide <- network_clicked_slide
network$network_center_slide <- network_center_slide
network$network_relative_clicked <- network_relative_clicked
network$network_total_slide <- network_total_slide
network$network_active_slide <- network_active_slide
}
})
shiny::observeEvent(input$slick2_current,{
network2_clicked_slide <- input$slick2_current$.clicked
network2_relative_clicked <- input$slick2_current$.relative_clicked
network2_center_slide <- input$slick2_current$.center
network2_total_slide <- input$slick2_current$.total
network2_active_slide <- input$slick2_current$.slide
if(!is.null(network2_clicked_slide)){
network2$network2_clicked_slide <- network2_clicked_slide
network2$network2_center_slide <- network2_center_slide
network2$network2_relative_clicked <- network2_relative_clicked
network2$network2_total_slide <- network2_total_slide
network2$network2_active_slide <- network2_active_slide
}
})
output$current <- renderText({
l <- shiny::reactiveValuesToList(network)
paste(gsub('_',' ',names(l)), unlist(l),sep=' = ',collapse='\n')
})
output$current2 <- renderText({
l <- shiny::reactiveValuesToList(network2)
paste(gsub('_',' ',names(l)), unlist(l),sep=' = ',collapse='\n')
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
shiny::verbatimTextOutput('current'),
shiny::verbatimTextOutput('current2')
),
mainPanel(slickROutput("slick",width='100%',height='100px'),
slickROutput("slick2",width='100%',height='100px'))
)
)
shinyApp(ui = ui, server = server)
# install package so we can test it
install()
setwd("/Users/rosstyzackpitman/OneDrive/Data/GitHub/Packages/slickR")
library(htmlwidgets)
library(devtools)
library(shiny)
library(tidyverse)
# install package so we can test it
install()
teamImg=sprintf(paste0("https://i.cdn.turner.com/nba/nba/.element/",
"img/4.0/global/logos/512x512/bg.white/svg/%s.svg"),
nbaTeams[1:10])
suppressMessages({
library(shiny)
library(dplyr)
library(htmlwidgets)
library(slickR)
library(xml2)
})
#NBA Team Logos
nbaTeams=c("ATL","BOS","BKN","CHA","CHI","CLE","DAL","DEN","DET","GSW",
"HOU","IND","LAC","LAL","MEM","MIA","MIL","MIN","NOP","NYK",
"OKC","ORL","PHI","PHX","POR","SAC","SAS","TOR","UTA","WAS")
teamImg=sprintf(paste0("https://i.cdn.turner.com/nba/nba/.element/",
"img/4.0/global/logos/512x512/bg.white/svg/%s.svg"),
nbaTeams[1:10])
teamImg2=sprintf(paste0("https://i.cdn.turner.com/nba/nba/.element/",
"img/4.0/global/logos/512x512/bg.white/svg/%s.svg"),
nbaTeams[1:15])
server <- function(input, output) {
output$slick <- renderSlickR({
slickR(obj = teamImg, slideId = 'ex1',height = 100,width='100%')
})
output$slick2 <- renderSlickR({
slickR(obj = teamImg2, slideId = 'ex9',height = 100,width='100%')
})
network <- shiny::reactiveValues()
network2 <- shiny::reactiveValues()
shiny::observeEvent(input$slick_current,{
network_clicked_slide <- input$slick_current$.clicked
network_relative_clicked <- input$slick_current$.relative_clicked
network_center_slide <- input$slick_current$.center
network_total_slide <- input$slick_current$.total
network_active_slide <- input$slick_current$.slide
if(!is.null(network_clicked_slide)){
network$network_clicked_slide <- network_clicked_slide
network$network_center_slide <- network_center_slide
network$network_relative_clicked <- network_relative_clicked
network$network_total_slide <- network_total_slide
network$network_active_slide <- network_active_slide
}
})
shiny::observeEvent(input$slick2_current,{
network2_clicked_slide <- input$slick2_current$.clicked
network2_relative_clicked <- input$slick2_current$.relative_clicked
network2_center_slide <- input$slick2_current$.center
network2_total_slide <- input$slick2_current$.total
network2_active_slide <- input$slick2_current$.slide
if(!is.null(network2_clicked_slide)){
network2$network2_clicked_slide <- network2_clicked_slide
network2$network2_center_slide <- network2_center_slide
network2$network2_relative_clicked <- network2_relative_clicked
network2$network2_total_slide <- network2_total_slide
network2$network2_active_slide <- network2_active_slide
}
})
output$current <- renderText({
l <- shiny::reactiveValuesToList(network)
paste(gsub('_',' ',names(l)), unlist(l),sep=' = ',collapse='\n')
})
output$current2 <- renderText({
l <- shiny::reactiveValuesToList(network2)
paste(gsub('_',' ',names(l)), unlist(l),sep=' = ',collapse='\n')
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
shiny::verbatimTextOutput('current'),
shiny::verbatimTextOutput('current2')
),
mainPanel(slickROutput("slick",width='100%',height='100px'),
slickROutput("slick2",width='100%',height='100px'))
)
)
shinyApp(ui = ui, server = server)
devtools::install_github("metrumresearchgroup/slickR")
suppressMessages({
library(shiny)
library(dplyr)
library(htmlwidgets)
library(slickR)
library(xml2)
})
#NBA Team Logos
nbaTeams=c("ATL","BOS","BKN","CHA","CHI","CLE","DAL","DEN","DET","GSW",
"HOU","IND","LAC","LAL","MEM","MIA","MIL","MIN","NOP","NYK",
"OKC","ORL","PHI","PHX","POR","SAC","SAS","TOR","UTA","WAS")
teamImg=sprintf(paste0("https://i.cdn.turner.com/nba/nba/.element/",
"img/4.0/global/logos/512x512/bg.white/svg/%s.svg"),
nbaTeams[1:10])
teamImg2=sprintf(paste0("https://i.cdn.turner.com/nba/nba/.element/",
"img/4.0/global/logos/512x512/bg.white/svg/%s.svg"),
nbaTeams[1:15])
server <- function(input, output) {
output$slick <- renderSlickR({
slickR(obj = teamImg, slideId = 'ex1',height = 100,width='100%')
})
output$slick2 <- renderSlickR({
slickR(obj = teamImg2, slideId = 'ex9',height = 100,width='100%')
})
network <- shiny::reactiveValues()
network2 <- shiny::reactiveValues()
shiny::observeEvent(input$slick_current,{
network_clicked_slide <- input$slick_current$.clicked
network_relative_clicked <- input$slick_current$.relative_clicked
network_center_slide <- input$slick_current$.center
network_total_slide <- input$slick_current$.total
network_active_slide <- input$slick_current$.slide
if(!is.null(network_clicked_slide)){
network$network_clicked_slide <- network_clicked_slide
network$network_center_slide <- network_center_slide
network$network_relative_clicked <- network_relative_clicked
network$network_total_slide <- network_total_slide
network$network_active_slide <- network_active_slide
}
})
shiny::observeEvent(input$slick2_current,{
network2_clicked_slide <- input$slick2_current$.clicked
network2_relative_clicked <- input$slick2_current$.relative_clicked
network2_center_slide <- input$slick2_current$.center
network2_total_slide <- input$slick2_current$.total
network2_active_slide <- input$slick2_current$.slide
if(!is.null(network2_clicked_slide)){
network2$network2_clicked_slide <- network2_clicked_slide
network2$network2_center_slide <- network2_center_slide
network2$network2_relative_clicked <- network2_relative_clicked
network2$network2_total_slide <- network2_total_slide
network2$network2_active_slide <- network2_active_slide
}
})
output$current <- renderText({
l <- shiny::reactiveValuesToList(network)
paste(gsub('_',' ',names(l)), unlist(l),sep=' = ',collapse='\n')
})
output$current2 <- renderText({
l <- shiny::reactiveValuesToList(network2)
paste(gsub('_',' ',names(l)), unlist(l),sep=' = ',collapse='\n')
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
shiny::verbatimTextOutput('current'),
shiny::verbatimTextOutput('current2')
),
mainPanel(slickROutput("slick",width='100%',height='100px'),
slickROutput("slick2",width='100%',height='100px'))
)
)
shinyApp(ui = ui, server = server)
devtools::install_github("metrumresearchgroup/slickR")
suppressMessages({
library(shiny)
library(dplyr)
library(htmlwidgets)
library(slickR)
})
#NBA Team Logos
nbaTeams=c("ATL","BOS","BKN","CHA","CHI","CLE","DAL","DEN","DET","GSW",
"HOU","IND","LAC","LAL","MEM","MIA","MIL","MIN","NOP","NYK",
"OKC","ORL","PHI","PHX","POR","SAC","SAS","TOR","UTA","WAS")
teamImg=sprintf(paste0("https://i.cdn.turner.com/nba/nba/.element/",
"img/4.0/global/logos/512x512/bg.white/svg/%s.svg"),
nbaTeams)
teamImg2=sprintf(paste0("https://i.cdn.turner.com/nba/nba/.element/",
"img/4.0/global/logos/512x512/bg.white/svg/%s.svg"),
nbaTeams)
#Player Images
a1=read_html('http://www.espn.com/nba/depth') %>%
html_nodes(css = '#my-teams-table a')
a2=a1%>%html_attr('href')
a3=a1%>%html_text()
team_table=read_html('http://www.espn.com/nba/depth') %>%
html_table()
team_table=team_table[[1]][-c(1,2),]
playerTable=team_table%>%melt(,id='X1') %>%
arrange(X1,variable)
playerName=a2[grepl('[0-9]',a2)]
playerId=do.call('rbind',lapply(strsplit(playerName,'[/]'),
function(x) x[c(8,9)]))
playerId=playerId[playerId[,1]!='phi',]
playerTable$img=sprintf(paste0('http://a.espncdn.com/combiner/i?img=/",
"i/headshots/nba/players/full/%s.png&w=350&h=254'),
playerId[,1])
server <- function(input, output) {
output$slick <- renderSlickR({
slickR(obj = teamImg, slideId = 'ex1',
slickOpts = list(slidesToShow=3,centerMode=TRUE),
height = 100,width='100%')
})
output$slick2 <- renderSlickR({
slickR(obj = teamImg2, slideId = 'ex12',height = 100,width='100%')
})
network <- shiny::reactiveValues()
network2 <- shiny::reactiveValues()
shiny::observeEvent(input$slick_current,{
clicked_slide <- input$slick_current$.clicked
relative_clicked <- input$slick_current$.relative_clicked
center_slide <- input$slick_current$.center
total_slide <- input$slick_current$.total
active_slide <- input$slick_current$.slider
if(!is.null(center_slide)){
network$center_slide <- center_slide
network$total_slide  <- total_slide
network$active_slide <- active_slide
}
if(!is.null(clicked_slide)){
network$clicked_slide    <- clicked_slide
network$relative_clicked <- relative_clicked
network$center_slide     <- center_slide
network$total_slide      <- total_slide
network$active_slide     <- active_slide
}else{
network$clicked_slide <- NULL
network$relative_clicked <- NULL
}
})
shiny::observeEvent(input$slick2_current,{
clicked_slide <- input$slick2_current$.clicked
relative_clicked <- input$slick2_current$.relative_clicked
center_slide <- input$slick2_current$.center
total_slide <- input$slick2_current$.total
active_slide <- input$slick2_current$.slider
if(!is.null(center_slide)){
network2$center_slide <- center_slide
network2$total_slide  <- total_slide
network2$active_slide <- active_slide
}
if(!is.null(clicked_slide)){
network2$clicked_slide    <- clicked_slide
network2$relative_clicked <- relative_clicked
network2$center_slide     <- center_slide
network2$total_slide      <- total_slide
network2$active_slide     <- active_slide
}else{
network2$clicked_slide <- NULL
network2$relative_clicked <- NULL
}
})
output$current <- renderText({
l <- shiny::reactiveValuesToList(network)
l <- l[!sapply(l,is.null)]
paste(gsub('_',' ',names(l)), unlist(l),sep=' = ',collapse='\n')
})
output$current2 <- renderText({
l <- shiny::reactiveValuesToList(network2)
l <- l[!sapply(l,is.null)]
paste(gsub('_',' ',names(l)), unlist(l),sep=' = ',collapse='\n')
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
shiny::verbatimTextOutput('current'),
shiny::verbatimTextOutput('current2')
),
mainPanel(slickROutput("slick",width='100%',height='100px'),
slickROutput(outputId = "slick2",width='100%',height='100px'))
)
)
shinyApp(ui = ui, server = server)
packageVersion("slickR")
#  Creating an html widget - stackedArea
#  Ross Pitman
#  03/2018
################################################################################
rm(list = ls())
library(htmlwidgets)
library(devtools)
library(shiny)
library(PantheraWidgets)
dataset <- data.frame(
Time  = c("2016-01-05","2016-01-12","2016-01-24"),
GREEN = c(0.5,0.2,0.3),
RED   = c(0.5,0.8,0.7))
colors  <- list(GREEN = "green", RED = "red")
p3_stacked_area(dataset, colors)
#  Creating an html widget - lineBar
#  Ross Pitman
#  03/2018
################################################################################
rm(list = ls())
library(htmlwidgets)
library(devtools)
library(shiny)
# setwd("/Users/RossTyzackPitman/Documents/OneDrive/Data/GitHub/Packages/PantheraWidgets/widgets")
setwd("/Users/rosstyzackpitman/OneDrive_Panthera/Panthera/Work/Github/Packages/PantheraWidgets")
# setwd("/Users/RossTyzackPitman/Documents/OneDrive/Data/GitHub/Packages/PantheraWidgets/widgets")
setwd("/Users/rosstyzackpitman/OneDrive - Panthera/Panthera/Work/Github/Packages/PantheraWidgets")
library(PantheraWidgets)
dataset <- data.frame(Time=c("2016-01-05","2016-01-12","2016-01-24"),
GREEN=c(0.1,0,0.2),
RED=c(0.9,1,0.8),
Total=c(320,210,190))
colors      <- list(Total="gray",GREEN="Green",RED="Red")
p3_line_bar(dataset = dataset,
colors = colors,
width = '100%', height = '500px')
# create widget scaffolding
scaffoldWidget("p3_bar", edit = FALSE)
# install package so we can test it
install()
# navigate to package dir
setwd("PantheraWidgets")
# setwd("/Users/RossTyzackPitman/Documents/OneDrive/Data/GitHub/Packages/PantheraWidgets/widgets")
setwd("/Users/rosstyzackpitman/OneDrive - Panthera/Panthera/Work/Github/Packages/PantheraWidgets")
getwd()
# install package so we can test it
install()
#  Creating an html widget - Bar plot
#  Ross Pitman
#  09/2018
################################################################################
rm(list = ls())
#  Creating an html widget - Bar plot
#  Ross Pitman
#  09/2018
################################################################################
rm(list = ls())
library(htmlwidgets)
library(devtools)
library(shiny)
# setwd("/Users/RossTyzackPitman/Documents/OneDrive/Data/GitHub/Packages/PantheraWidgets/widgets")
setwd("/Users/rosstyzackpitman/OneDrive - Panthera/Panthera/Work/Github/Packages/PantheraWidgets")
# create widget scaffolding
scaffoldWidget("p3_bar", edit = FALSE)
# install package so we can test it
install()
# install package so we can test it
install()
library(PantheraWidgets)
dataset <- data.frame(Time=c("2016-01-05","2016-01-12","2016-01-24"),
GREEN=c(0.1,0,0.2),
RED=c(0.9,1,0.8),
Total=c(320,210,190))
colors      <- list(Total="gray",GREEN="Green",RED="Red")
p3_bar(dataset = dataset,
colors = colors,
width = '100%', height = '500px')
#  Creating an html widget - Bar plot
#  Ross Pitman
#  09/2018
################################################################################
rm(list = ls())
#  Creating an html widget - Bar plot
#  Ross Pitman
#  09/2018
################################################################################
rm(list = ls())
library(htmlwidgets)
library(devtools)
library(shiny)
# setwd("/Users/RossTyzackPitman/Documents/OneDrive/Data/GitHub/Packages/PantheraWidgets/widgets")
setwd("/Users/rosstyzackpitman/OneDrive - Panthera/Panthera/Work/Github/Packages/PantheraWidgets")
# create widget scaffolding
scaffoldWidget("p3_bar", edit = FALSE)
# install package so we can test it
# make sure PantheraWidgets is not loaded
install()
library(PantheraWidgets)
# install package so we can test it
# make sure PantheraWidgets is not loaded
install()
library(PantheraWidgets)
dataset <- data.frame(Time=c("2016-01-05","2016-01-12","2016-01-24"),
GREEN=c(0.1,0,0.2),
RED=c(0.9,1,0.8),
Total=c(320,210,190))
colors      <- list(Total="gray",GREEN="Green",RED="Red")
p3_bar(dataset = dataset,
colors = colors,
width = '100%', height = '500px')
